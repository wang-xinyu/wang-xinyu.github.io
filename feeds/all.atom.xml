<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>BlogWX</title><link href="https://wang-xinyu.github.io/" rel="alternate"></link><link href="https://wang-xinyu.github.io/feeds/all.atom.xml" rel="self"></link><id>https://wang-xinyu.github.io/</id><updated>2015-11-27T00:00:00+08:00</updated><entry><title>Get Started with MQTT</title><link href="https://wang-xinyu.github.io/get-started-with-mqtt.html" rel="alternate"></link><updated>2015-11-27T00:00:00+08:00</updated><author><name>WangXinyu</name></author><id>tag:wang-xinyu.github.io,2015-11-27:get-started-with-mqtt.html</id><summary type="html">&lt;h1&gt;MQTT入门介绍t1&lt;/h1&gt;
&lt;p&gt;本文参考&lt;a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"&gt;MQTT Version 3.1.1&lt;/a&gt;，根据个人的理解对MQTT进行入门级的介绍。&lt;/p&gt;
&lt;h2&gt;1. 概述&lt;/h2&gt;
&lt;p&gt;MQTT（MQ Telemetry Transport）是应用于M2M/IoT的传输协议，来自于IBM，已于2014年正式成为了OASIS标准。&lt;/p&gt;
&lt;p&gt;MQTT是极其简单、轻量级的协议，这是针对IoT的带宽低、延迟高、不稳定、终端设备功能简单等特点而设计的。MQTT在简单轻量的同时保证了通信的有效性和可靠性。&lt;/p&gt;
&lt;p&gt;MQTT采用客户端和服务器之间发布／订阅的方式进行消息传递。客户端可向服务器发布消息，也可向服务器订阅其它客户端发布的消息。服务器可被视为发布消息的客户端和订阅消息的客户端之间的中介。客户端之间不可直接传递消息，必须通过中介（服务器）来发布／订阅消息。&lt;/p&gt;
&lt;p&gt;MQTT可基于TCP/IP或其它有序的、丢包率低的、双向的网络协议。&lt;/p&gt;
&lt;p&gt;MQTT控制包（Control Packet）是网络中传输的MQTT信息的总称，控制包分为14种类型。&lt;/p&gt;
&lt;h2&gt;2. MQTT内容概况&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"&gt;MQTT Version 3.1.1&lt;/a&gt;标准内容非常少，整个标准只有81页，包括的主要内容只有：&lt;/p&gt;
&lt;p&gt;（1）MQTT控制包（Control Packet）的通用格式；&lt;/p&gt;
&lt;p&gt;（2）14种控制包的具体说明；&lt;/p&gt;
&lt;p&gt;（3）通信的具体流程；&lt;/p&gt;
&lt;p&gt;（4）加密问题。&lt;/p&gt;
&lt;h2&gt;3. 控制包格式&lt;/h2&gt;
&lt;p&gt;MQTT控制包只有三部分，固定头、可选头、净荷，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="MQTTctrlPktStruc.png" src="/images/MQTTctrlPktStruc.png" /&gt;&lt;/p&gt;
&lt;p&gt;固定头是每一种控制包都有的，大小为2Byte，包括控制包类型、标志和剩余长度三个字段，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="MQTTfixHead.png" src="/images/MQTTfixHead.png" /&gt;&lt;/p&gt;
&lt;p&gt;可选头和净荷都存在于其中几种类型的控制包中，内容取决于包类型。&lt;/p&gt;
&lt;h2&gt;4. 控制包类型&lt;/h2&gt;
&lt;p&gt;下表是MQTT控制包的14种类型，C2S代表客户端到服务器，S2C反之。各类型控制包的具体内容请参阅&lt;a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"&gt;MQTT Version 3.1.1&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="MQTTctrlPktCtgry.png" src="/images/MQTTctrlPktCtgry.png" /&gt;&lt;/p&gt;
&lt;h2&gt;5. QoS等级和消息传递流程&lt;/h2&gt;
&lt;p&gt;MQTT应用消息的传递有3个保障级别，即3个QoS等级。不同QoS等级对应着不同的消息传递流程。&lt;/p&gt;
&lt;p&gt;（1）QoS 0: At most once delivery，至多一次传递。发送端仅发送一次，无重传，接收端无响应。消息可能到达接收端一次或零次。&lt;/p&gt;
&lt;p&gt;（2）QoS 1: At least once delivery，至少一次传递。接收端收到消息后返回PUBACK，消息至少到达接收端一次。&lt;/p&gt;
&lt;p&gt;（3）QoS 2: Exactly once delivery，消息传且仅传一次。此级别不允许丢包和消息重复。消息要经过两次确认，第一次发送端发送PUBLISH，接收端返回PUBREC；随后第二次发送端发送PUBREL，接收端返回PUBCOMP。&lt;/p&gt;
&lt;p&gt;注：本文为作者原创，转载请注明出处。&lt;/p&gt;</summary><category term="IoT"></category></entry><entry><title>Concepts for ES</title><link href="https://wang-xinyu.github.io/concepts-for-es.html" rel="alternate"></link><updated>2015-11-06T00:00:00+08:00</updated><author><name>WangXinyu</name></author><id>tag:wang-xinyu.github.io,2015-11-06:concepts-for-es.html</id><summary type="html">&lt;h1&gt;嵌入式系统的相关概念&lt;/h1&gt;
&lt;h2&gt;1. 什么是嵌入式系统？&lt;/h2&gt;
&lt;h4&gt;维基百科的定义&lt;/h4&gt;
&lt;p&gt;嵌入式系统（Embedded system），是一种「嵌入机械或电气系统内部、具有专属功能的计算机系统」，通常要求实时计算性能。&lt;/p&gt;
&lt;h4&gt;TechTarget的定义&lt;/h4&gt;
&lt;p&gt;嵌入式系统是一些计算机软硬件的集合，它是功能固定的或者可编程的，它是专门为一个特殊的功能而设计的。&lt;/p&gt;
&lt;h4&gt;WeboPedia的定义&lt;/h4&gt;
&lt;p&gt;一种专用的计算机系统，是一个大型系统或机械的一部分。通常，一个嵌入式系统位于一块单处理器的板子上，程序存在ROM中。&lt;/p&gt;
&lt;h4&gt;TechoPedia的定义&lt;/h4&gt;
&lt;p&gt;嵌入式系统是为一两个特殊功能而设计的专用计算机系统。这个系统被嵌入到一个完整的硬件设备中。嵌入式系统由一个或多个处理芯片管理，如MCU、DSP、FPGA、ASIC等。&lt;/p&gt;
&lt;h4&gt;我的理解&lt;/h4&gt;
&lt;p&gt;嵌入式系统是一个专用的计算机系统，嵌入到一套设备中，完成特定的功能。可以有也可以没有操作系统。&lt;/p&gt;
&lt;h2&gt;2. 可用性、可靠性、安全性、保险性&lt;/h2&gt;
&lt;h4&gt;可用性Availability&lt;/h4&gt;
&lt;p&gt;系统在某个时间点是可运行的，并能够提供所期望服务的概率。&lt;/p&gt;
&lt;h4&gt;可靠性Reliability&lt;/h4&gt;
&lt;p&gt;系统在给定的时间内，给定的环境下，为给定目的而执行的系统操作保持无失效的概率。&lt;/p&gt;
&lt;h4&gt;安全性Security&lt;/h4&gt;
&lt;p&gt;系统保护自身不被外界故意或无意攻击的能力。&lt;/p&gt;
&lt;h4&gt;保险性Safety&lt;/h4&gt;
&lt;p&gt;系统运行期间不对人身或周边环境带来伤害的能力。&lt;/p&gt;
&lt;p&gt;未完待续......&lt;/p&gt;</summary><category term="ES"></category></entry></feed>