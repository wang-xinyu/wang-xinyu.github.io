<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>BlogWX</title><link href="https://wang-xinyu.github.io/" rel="alternate"></link><link href="https://wang-xinyu.github.io/feeds/iot.atom.xml" rel="self"></link><id>https://wang-xinyu.github.io/</id><updated>2015-12-02T00:00:00+08:00</updated><entry><title>Introduction to MODBUS over Serial Line</title><link href="https://wang-xinyu.github.io/introduction-to-modbus-over-serial-line.html" rel="alternate"></link><updated>2015-12-02T00:00:00+08:00</updated><author><name>WangXinyu</name></author><id>tag:wang-xinyu.github.io,2015-12-02:introduction-to-modbus-over-serial-line.html</id><summary type="html">&lt;h1&gt;MODBUS over Serial Line介绍&lt;/h1&gt;
&lt;p&gt;本文参考'MODBUS over Serial Line V1.02'，根据个人的理解对MODBUS over Serial Line进行介绍，若要阅读协议文档请访问&lt;a href="http://www.modbus.org"&gt;MODBUS官网&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;1. MODBUS简介&lt;/h2&gt;
&lt;p&gt;MODBUS标准定义了一个应用层的消息传输协议，即位于OSI模型的第七层，它为连接至不同类型总线或网络的设备提供了Client/Server通信机制。此外，MODBUS也标定了一个串行线上的协议，即MODBUS over Serial Line，用于主机与从机之间交换MODBUS请求。&lt;/p&gt;
&lt;h2&gt;2. MODBUS over Serial Line概述&lt;/h2&gt;
&lt;p&gt;MODBUS over Serial Line也可被称为MODBUS Serial Line protocol，该协议位于OSI模型的第二层，即数据链路层。它是一种主从式的协议，支持的物理层协议是TIA/EIA-485或TIA/EIA-232，即RS485和RS232。&lt;/p&gt;
&lt;h2&gt;3. MODBUS over Serial Line明细&lt;/h2&gt;
&lt;h3&gt;3.1 主从式协议的原则&lt;/h3&gt;
&lt;p&gt;MODBUS over Serial Line主从式系统的特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主节点有且仅有一个，从节点有1-247个；&lt;/li&gt;
&lt;li&gt;主节点向从节点下达命令，并处理从节点的响应；&lt;/li&gt;
&lt;li&gt;从节点只有在收到主节点的请求后才发送数据，从节点之间不可直接通信；&lt;/li&gt;
&lt;li&gt;主节点在同一时刻只能进行一项MODBUS交易，即不能同时与多个从节点通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主节点下达的MODBUS请求有如下两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unicast mode（单播模式），主机向一个从机下达一条请求，从机的地址是1-247，该从机在收到并处理请求后，返回一条'reply'；&lt;/li&gt;
&lt;li&gt;broadcast mode（广播模式），主机可将一条请求下达至所有从机，广播请求中地址值为0，从机在收到广播请求后不返回信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.2 寻址规则&lt;/h3&gt;
&lt;p&gt;MODBUS的寻址空间包括256个地址，主节点没有地址，一条MODBUS串行总线上的从节点必须有一个独立的地址，具体的地址分配如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0，广播地址；&lt;/li&gt;
&lt;li&gt;1-247，从节点地址；&lt;/li&gt;
&lt;li&gt;248-255，保留。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.3 帧结构&lt;/h3&gt;
&lt;p&gt;帧结构图如下，PDU即Protocol Data Unit。主机下达请求时，将从机的地址写入地址字段，从机返回响应时，将自己的地址写入地址字段。功能码用于指示功能，数据字段包含请求或响应的参数。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ModbusPDU.png" src="/images/ModbusPDU.png" /&gt;&lt;/p&gt;
&lt;h3&gt;3.4 状态转换图&lt;/h3&gt;
&lt;p&gt;主机状态转换图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ModbusMasterStat.png" src="/images/ModbusMasterStat.png" /&gt;&lt;/p&gt;
&lt;p&gt;从机状态转换图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ModbusSlaveStat.png" src="/images/ModbusSlaveStat.png" /&gt;&lt;/p&gt;
&lt;h3&gt;3.5 两种串行传输模式——RTU与ASCII&lt;/h3&gt;
&lt;h4&gt;3.5.1 RTU模式&lt;/h4&gt;
&lt;p&gt;RTU即Remote Terminal Unit，该模式下，数据以二进制数字形式传输，例如需传输的一个字节是0x5B，实际传输的数据也是0x5B。RTU模式主要包含如下几点约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个字节都被封装成11位，包含1位起始位、8位数据、1位奇/偶校验位、1位停止位；&lt;/li&gt;
&lt;li&gt;帧结构包含1字节从机地址、1字节功能码、0－252字节数据、2字节CRC校验；&lt;/li&gt;
&lt;li&gt;帧间间隔至少为3.5倍的单字符传输时间；&lt;/li&gt;
&lt;li&gt;帧内的字符间隔至多为1.5倍的单字符传输时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3.5.2 ASCII模式&lt;/h4&gt;
&lt;p&gt;ASCII模式下，数据以ASCII字符形式传输，例如需传输的一个字节是0x5B，实际传输的是0x35（“5”）和0x42（“B”），显然该模式的传输效率比RTU低。通常，只有当设备不满足RTU模式所需的定时器要求时，才使用ASCII模式。ASCII主要包含如下几点约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个字节都被封装成10位，包含1位起始位、7位数据、1位奇/偶校验位、1位停止位；&lt;/li&gt;
&lt;li&gt;帧结构包含1字符起始字段、2字符从机地址、2字符功能码、0－2x252字符数据、2字符LRC校验、2字符结束字段；&lt;/li&gt;
&lt;li&gt;起始字段是冒号“:”，结束字段是CR和LF。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：本文为作者原创，欢迎批评指正，转载请注明出处。&lt;/p&gt;</summary><category term="IoT"></category></entry><entry><title>Get Started with MQTT</title><link href="https://wang-xinyu.github.io/get-started-with-mqtt.html" rel="alternate"></link><updated>2015-11-27T00:00:00+08:00</updated><author><name>WangXinyu</name></author><id>tag:wang-xinyu.github.io,2015-11-27:get-started-with-mqtt.html</id><summary type="html">&lt;h1&gt;MQTT入门介绍&lt;/h1&gt;
&lt;p&gt;本文参考&lt;a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"&gt;MQTT Version 3.1.1&lt;/a&gt;，根据个人的理解对MQTT进行入门级的介绍。&lt;/p&gt;
&lt;h2&gt;1. 概述&lt;/h2&gt;
&lt;p&gt;MQTT（MQ Telemetry Transport）是应用于M2M/IoT的传输协议，来自于IBM，已于2014年正式成为了OASIS标准。&lt;/p&gt;
&lt;p&gt;MQTT是极其简单、轻量级的协议，这是针对IoT的带宽低、延迟高、不稳定、终端设备功能简单等特点而设计的。MQTT在简单轻量的同时保证了通信的有效性和可靠性。&lt;/p&gt;
&lt;p&gt;MQTT采用客户端和服务器之间发布／订阅的方式进行消息传递。客户端可向服务器发布消息，也可向服务器订阅其它客户端发布的消息。服务器可被视为发布消息的客户端和订阅消息的客户端之间的中介。客户端之间不可直接传递消息，必须通过中介（服务器）来发布／订阅消息。&lt;/p&gt;
&lt;p&gt;MQTT可基于TCP/IP或其它有序的、丢包率低的、双向的网络协议。&lt;/p&gt;
&lt;p&gt;MQTT控制包（Control Packet）是网络中传输的MQTT信息的总称，控制包分为14种类型。&lt;/p&gt;
&lt;h2&gt;2. MQTT内容概况&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"&gt;MQTT Version 3.1.1&lt;/a&gt;标准内容非常少，整个标准只有81页，包括的主要内容只有：&lt;/p&gt;
&lt;p&gt;（1）MQTT控制包（Control Packet）的通用格式；&lt;/p&gt;
&lt;p&gt;（2）14种控制包的具体说明；&lt;/p&gt;
&lt;p&gt;（3）通信的具体流程；&lt;/p&gt;
&lt;p&gt;（4）加密问题。&lt;/p&gt;
&lt;h2&gt;3. 控制包格式&lt;/h2&gt;
&lt;p&gt;MQTT控制包只有三部分，固定头、可选头、净荷，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="MQTTctrlPktStruc.png" src="/images/MQTTctrlPktStruc.png" /&gt;&lt;/p&gt;
&lt;p&gt;固定头是每一种控制包都有的，大小为2Byte，包括控制包类型、标志和剩余长度三个字段，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="MQTTfixHead.png" src="/images/MQTTfixHead.png" /&gt;&lt;/p&gt;
&lt;p&gt;可选头和净荷都存在于其中几种类型的控制包中，内容取决于包类型。&lt;/p&gt;
&lt;h2&gt;4. 控制包类型&lt;/h2&gt;
&lt;p&gt;下表是MQTT控制包的14种类型，C2S代表客户端到服务器，S2C反之。各类型控制包的具体内容请参阅&lt;a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"&gt;MQTT Version 3.1.1&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="MQTTctrlPktCtgry.png" src="/images/MQTTctrlPktCtgry.png" /&gt;&lt;/p&gt;
&lt;h2&gt;5. QoS等级和消息传递流程&lt;/h2&gt;
&lt;p&gt;MQTT应用消息的传递有3个保障级别，即3个QoS等级。不同QoS等级对应着不同的消息传递流程。&lt;/p&gt;
&lt;p&gt;（1）QoS 0: At most once delivery，至多一次传递。发送端仅发送一次，无重传，接收端无响应。消息可能到达接收端一次或零次。&lt;/p&gt;
&lt;p&gt;（2）QoS 1: At least once delivery，至少一次传递。接收端收到消息后返回PUBACK，消息至少到达接收端一次。&lt;/p&gt;
&lt;p&gt;（3）QoS 2: Exactly once delivery，消息传且仅传一次。此级别不允许丢包和消息重复。消息要经过两次确认，第一次发送端发送PUBLISH，接收端返回PUBREC；随后第二次发送端发送PUBREL，接收端返回PUBCOMP。&lt;/p&gt;
&lt;p&gt;注：本文为作者原创，转载请注明出处。&lt;/p&gt;</summary><category term="IoT"></category></entry></feed>