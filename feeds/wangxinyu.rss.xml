<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>BlogWX - WangXinyu</title><link>https://wang-xinyu.github.io/</link><description></description><lastBuildDate>Sun, 25 Feb 2018 00:00:00 +0800</lastBuildDate><item><title>BP Neural Networks</title><link>https://wang-xinyu.github.io/bp-neural-networks.html</link><description>&lt;h1&gt;BP Neural Networks&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;Feed Forward&lt;/h2&gt;
&lt;p&gt;&lt;img alt="nn" src="/images/neural_networks.png"&gt;&lt;/p&gt;
&lt;p&gt;$$
z_1^{(2)} = w_{11}^{(2)}x_1 + w_{12}^{(2)}x_2 + w_{13}^{(2)}x_3 + b_1^{(2)}
$$&lt;/p&gt;
&lt;p&gt;$$
a_1^{(2)} = f(z_1^{(2)})
$$&lt;/p&gt;
&lt;h2&gt;Back Propagation&lt;/h2&gt;
&lt;p&gt;We got N pairs of training data, and the dimension of output vector is k.&lt;/p&gt;
&lt;p&gt;$$
{ (X^{(1)}, Y^{(1)}), (X^{(2)}, Y …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Sun, 25 Feb 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2018-02-25:/bp-neural-networks.html</guid><category>Math</category></item><item><title>FastSLAM for Feature-Based Maps</title><link>https://wang-xinyu.github.io/fastslam-for-feature-based-maps.html</link><description>&lt;h1&gt;FastSLAM for Feature-Based Maps&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;FastSLAM applys a version of particle filters to SLAM known as Rao-Blackwellized Particle Filter. Which uses particles to represent the posterior over some variables, along with Gaussians to represent all other vaviables. &lt;/p&gt;
&lt;h2&gt;Assumptions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The maps in EKF SLAM are feature-based, they are composed of point …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Fri, 25 Aug 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2017-08-25:/fastslam-for-feature-based-maps.html</guid><category>Math</category></item><item><title>EKF SLAM-The Most Primitive SLAM</title><link>https://wang-xinyu.github.io/ekf-slam-the-most-primitive-slam.html</link><description>&lt;h1&gt;EKF SLAM-The Most Primitive SLAM&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In SLAM, the robot is given measurements $z_{1:t}$ and controls $u_{1:t}$, and acquires a map of its environment while simultaneously localizing itself relative to this map. From a probabilistic perspective, the online SLAM involves estimating the posterior over the current …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Thu, 17 Aug 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2017-08-17:/ekf-slam-the-most-primitive-slam.html</guid><category>Math</category></item><item><title>The Derivation of Generic Particle Filter for Robot</title><link>https://wang-xinyu.github.io/the-derivation-of-generic-particle-filter-for-robot.html</link><description>&lt;h1&gt;机器人的普通粒子滤波推导&lt;/h1&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;我这里所说的普通粒子滤波也叫SIR（Sampling Importance Resampling）粒子滤波。因为时至今日已产生了很多粒子滤波的变种，例如：regularized particle filter，Rao-Blackwellized particle filter等等，这些都使用了某种方法对基本的粒子滤波进行了优化。&lt;/p&gt;
&lt;p&gt;粒子滤波可以说是使用Monte Carlo方法的贝叶斯滤波的实现。这是因为SIS（Sequential Importance Sampling）是一种Monte Carlo方法，而粒子滤波、bootstap filter、condensation算法等，都可以基于SIS推导出来。&lt;/p&gt;
&lt;p&gt;Kalman滤波只能处理高斯分布，且状态转移方程和测量方程都必须线性。EKF是通过Taylor级数展开，把状态转移方程和测量方程线性化，仍假设噪声是高斯分布。而粒子滤波就可以处理非线性、任意分布的问题了。&lt;/p&gt;
&lt;h2&gt;模型&lt;/h2&gt;
&lt;p&gt;与Kalman滤波不同，粒子滤波不是估计$t$时刻状态向量的置信分布$bel(x_t)$，而是$0:t$时刻所有状态向量序列的置信分布$bel(x_{0 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Mon, 26 Jun 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2017-06-26:/the-derivation-of-generic-particle-filter-for-robot.html</guid><category>Math</category></item><item><title>The Derivation of Kalman Filter from Bayes Filter</title><link>https://wang-xinyu.github.io/the-derivation-of-kalman-filter-from-bayes-filter.html</link><description>&lt;h1&gt;从贝叶斯滤波到卡尔曼滤波&lt;/h1&gt;
&lt;h2&gt;卡尔曼滤波的三个假设&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 状态转移方程是线性的，噪声服从均值为$0$，协方差为$R_t$的多元高斯分布。因此，状态转移概率服从均值$A_t x_{t-1} + B_t u_t$，协方差为$R_t$的多元高斯分布。&lt;/p&gt;
&lt;p&gt;$$
\epsilon_t \sim N(0, R_t)
$$&lt;/p&gt;
&lt;p&gt;$$
x_t = A_t x_{t-1} + B_t u_t + \epsilon_t
$$&lt;/p&gt;
&lt;p&gt;$$
p(x_t|u_t, x_{t-1}) \sim N(A_t x_{t-1} + B_t u_t, R_t)
$$&lt;/p&gt;
&lt;p&gt;$$
p(x_t|u_t, x_{t-1}) = det …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Sat, 17 Jun 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2017-06-17:/the-derivation-of-kalman-filter-from-bayes-filter.html</guid><category>Math</category></item><item><title>Bayes Filter for Robot</title><link>https://wang-xinyu.github.io/bayes-filter-for-robot.html</link><description>&lt;h1&gt;概率机器人的贝叶斯滤波器&lt;/h1&gt;
&lt;h2&gt;模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$x_t$表示$t$时刻机器人的状态向量&lt;/li&gt;
&lt;li&gt;$z_t$表示$t$时刻的测量向量&lt;/li&gt;
&lt;li&gt;$u_t$表示$t$时刻的控制向量&lt;/li&gt;
&lt;li&gt;$bel(x_t)$表示状态向量的置信分布（Belief Distributions），根据它我们就可以确定$t$时刻机器人的状态，贝叶斯滤波器最终的输出结果就是它。它的定义如下，即在已知1到$t$时刻的测量向量和控制向量的条件下，机器人处于状态$x_t$的概率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
bel(x_t) = p(x_t|z_{1:t},u_{1:t})
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\overline {bel}(x_t)$是计算$bel(x_t)$的一个中间值，称为预测（Prediction）。它的定义如下 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Tue, 13 Jun 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2017-06-13:/bayes-filter-for-robot.html</guid><category>Math</category></item><item><title>Total Probability Applied to Conditional Probability</title><link>https://wang-xinyu.github.io/total-probability-applied-to-conditional-probability.html</link><description>&lt;h1&gt;使用全概率公式计算条件概率&lt;/h1&gt;
&lt;h2&gt;公式&lt;/h2&gt;
&lt;p&gt;先给出公式，然后证明。&lt;/p&gt;
&lt;p&gt;$$
P(A|B) = \sum_{i=1}^n P(A|B,C_i) \cdot P(C_i|B)
$$&lt;/p&gt;
&lt;p&gt;$$
p(x|y) = \int p(x|y,z) \cdot p(z|y)dz
$$&lt;/p&gt;
&lt;h2&gt;证明&lt;/h2&gt;
&lt;p&gt;这里以离散概率为例进行证明，连续型与之类似。&lt;/p&gt;
&lt;p&gt;\begin{equation}\begin{split}
P(A,B) &amp;amp;= \sum_{i=1}^n P(A,B,C_i …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Mon, 12 Jun 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2017-06-12:/total-probability-applied-to-conditional-probability.html</guid><category>Math</category></item><item><title>Setup Chinese Input Method on Ubuntu</title><link>https://wang-xinyu.github.io/setup-chinese-input-method-on-ubuntu.html</link><description>&lt;h1&gt;Ubuntu设置中文输入法IBus&lt;/h1&gt;
&lt;h2&gt;1. 安装语言包&lt;/h2&gt;
&lt;p&gt;打开System Settings–&amp;gt;Language Support–&amp;gt;Install/Remove Languages，安装Chinese(simplified)。&lt;/p&gt;
&lt;h2&gt;2. 安裝IBus框架&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install ibus ibus-clutter ibus-gtk ibus-gtk3 ibus-qt4
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3. 启用IBus框架&lt;/h2&gt;
&lt;p&gt;运行以下命令，重启电脑。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ im-switch -s ibus     // Ubuntu &lt;span class="m"&gt;14&lt;/span&gt;.04
$ im-config -s ibus     // Ubuntu &lt;span class="m"&gt;16&lt;/span&gt;.04
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. 安装拼音引擎&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install ibus-pinyin
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5. 设置IBus框架&lt;/h2&gt;
&lt;p&gt;运行如下命令，在弹出的窗口中选择Add-&amp;gt;Chinese-&amp;gt;Pinyin …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Tue, 09 May 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2017-05-09:/setup-chinese-input-method-on-ubuntu.html</guid><category>Linux</category></item><item><title>Getting Started with ROS Navigation Stack</title><link>https://wang-xinyu.github.io/getting-started-with-ros-navigation-stack.html</link><description>&lt;h1&gt;Getting Started with ROS Navigation Stack&lt;/h1&gt;
&lt;p&gt;ROS is a open-source framework for robot software development. Personally, I think ROS is the future of Robot. In this article, I'll introduce how to work with ROS Navigation Stack from the beginning.&lt;/p&gt;
&lt;h2&gt;1. Install ROS&lt;/h2&gt;
&lt;p&gt;ROS is not a standalone OS, but based …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Fri, 19 Aug 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2016-08-19:/getting-started-with-ros-navigation-stack.html</guid><category>ROS</category></item><item><title>Modify the user name of Raspbian</title><link>https://wang-xinyu.github.io/modify-the-user-name-of-raspbian.html</link><description>&lt;h1&gt;修改Raspbian的用户名&lt;/h1&gt;
&lt;h4&gt;版权声明：本文为作者原创，欢迎批评指正，谢绝转载。&lt;/h4&gt;
&lt;p&gt;本文将介绍通过SSH修改Raspbian默认用户名pi的详细过程。&lt;/p&gt;
&lt;h2&gt;1. 启用root用户&lt;/h2&gt;
&lt;p&gt;输入两遍密码解锁root用户，最后通过su验证root用户是否已经启用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ sudo passwd root
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully

pi@raspberrypi:~ $ sudo passwd --unlock root
passwd: password expiry information changed.

pi@raspberrypi:~ $ su
Password: 
root@raspberrypi:/home/pi#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. 允许SSH登录root用户&lt;/h2&gt;
&lt;p&gt;SSH出于安全考虑，默认不允许登录root用户 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Tue, 19 Apr 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2016-04-19:/modify-the-user-name-of-raspbian.html</guid><category>Linux</category><category>Raspi</category></item><item><title>Summary of C Traps</title><link>https://wang-xinyu.github.io/summary-of-c-traps.html</link><description>&lt;h1&gt;C陷阱总结&lt;/h1&gt;
&lt;h4&gt;版权声明：本文为作者原创，欢迎批评指正，谢绝转载。&lt;/h4&gt;
&lt;p&gt;本文记录笔者在学习和实践中遇到的C问题，将随着学习的深入不断更新。&lt;/p&gt;
&lt;h2&gt;1. const修饰符&lt;/h2&gt;
&lt;p&gt;const指常量、常数。const与#define相比，效率更高。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const int i;                /* i不可变 */
int const i;                /* i不可变 */
int const a[3]={1, 2, 3};   /* 数组不可变 */
const int a[3]={1, 2, 3};   /* 数组不可变 */
const int *p;               /* p 可变，p 指向的对象不可变 */
int const *p;               /* p 可变 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Tue, 08 Dec 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2015-12-08:/summary-of-c-traps.html</guid><category>C</category></item><item><title>Introduction to MODBUS over Serial Line</title><link>https://wang-xinyu.github.io/introduction-to-modbus-over-serial-line.html</link><description>&lt;h1&gt;MODBUS over Serial Line介绍&lt;/h1&gt;
&lt;p&gt;本文参考'MODBUS over Serial Line V1.02'，根据个人的理解对MODBUS over Serial Line进行介绍，若要阅读协议文档请访问&lt;a href="http://www.modbus.org"&gt;MODBUS官网&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;1. MODBUS简介&lt;/h2&gt;
&lt;p&gt;MODBUS标准定义了一个应用层的消息传输协议，即位于OSI模型的第七层，它为连接至不同类型总线或网络的设备提供了Client/Server通信机制。此外，MODBUS也标定了一个串行线上的协议，即MODBUS over Serial Line，用于主机与从机之间交换MODBUS请求。&lt;/p&gt;
&lt;h2&gt;2. MODBUS over Serial Line概述&lt;/h2&gt;
&lt;p&gt;MODBUS over Serial Line也可被称为MODBUS Serial Line protocol，该协议位于OSI模型的第二层，即数据链路层。它是一种主从式的协议，支持的物理层协议是TIA/EIA-485或TIA/EIA-232，即RS485和RS232。&lt;/p&gt;
&lt;h2&gt;3. MODBUS …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Wed, 02 Dec 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2015-12-02:/introduction-to-modbus-over-serial-line.html</guid><category>MODBUS</category></item><item><title>Getting Started with MQTT</title><link>https://wang-xinyu.github.io/getting-started-with-mqtt.html</link><description>&lt;h1&gt;MQTT入门介绍&lt;/h1&gt;
&lt;p&gt;本文参考&lt;a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"&gt;MQTT Version 3.1.1&lt;/a&gt;，根据个人的理解对MQTT进行入门级的介绍。&lt;/p&gt;
&lt;h2&gt;1. 概述&lt;/h2&gt;
&lt;p&gt;MQTT（MQ Telemetry Transport）是应用于M2M/IoT的传输协议，来自于IBM，已于2014年正式成为了OASIS标准。&lt;/p&gt;
&lt;p&gt;MQTT是极其简单、轻量级的协议，这是针对IoT的带宽低、延迟高、不稳定、终端设备功能简单等特点而设计的。MQTT在简单轻量的同时保证了通信的有效性和可靠性。&lt;/p&gt;
&lt;p&gt;MQTT采用客户端和服务器之间发布／订阅的方式进行消息传递。客户端可向服务器发布消息，也可向服务器订阅其它客户端发布的消息。服务器可被视为发布消息的客户端和订阅消息的客户端之间的中介。客户端之间不可直接传递消息，必须通过中介（服务器）来发布／订阅消息。&lt;/p&gt;
&lt;p&gt;MQTT可基于TCP/IP或其它有序的、丢包率低的、双向的网络协议。&lt;/p&gt;
&lt;p&gt;MQTT控制包（Control Packet）是网络中传输的MQTT信息的总称，控制包分为14种类型。&lt;/p&gt;
&lt;h2&gt;2. MQTT内容概况&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"&gt;MQTT Version 3.1 …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Fri, 27 Nov 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2015-11-27:/getting-started-with-mqtt.html</guid><category>MQTT</category></item><item><title>Concepts for ES</title><link>https://wang-xinyu.github.io/concepts-for-es.html</link><description>&lt;h1&gt;嵌入式系统的相关概念&lt;/h1&gt;
&lt;h2&gt;1. 什么是嵌入式系统？&lt;/h2&gt;
&lt;h3&gt;维基百科的定义&lt;/h3&gt;
&lt;p&gt;嵌入式系统（Embedded system），是一种「嵌入机械或电气系统内部、具有专属功能的计算机系统」，通常要求实时计算性能。&lt;/p&gt;
&lt;h3&gt;TechTarget的定义&lt;/h3&gt;
&lt;p&gt;嵌入式系统是一些计算机软硬件的集合，它是功能固定的或者可编程的，它是专门为一个特殊的功能而设计的。&lt;/p&gt;
&lt;h3&gt;WeboPedia的定义&lt;/h3&gt;
&lt;p&gt;一种专用的计算机系统，是一个大型系统或机械的一部分。通常，一个嵌入式系统位于一块单处理器的板子上，程序存在ROM中。&lt;/p&gt;
&lt;h3&gt;TechoPedia的定义&lt;/h3&gt;
&lt;p&gt;嵌入式系统是为一两个特殊功能而设计的专用计算机系统。这个系统被嵌入到一个完整的硬件设备中。嵌入式系统由一个或多个处理芯片管理，如MCU、DSP、FPGA、ASIC等。&lt;/p&gt;
&lt;h3&gt;我的理解&lt;/h3&gt;
&lt;p&gt;嵌入式系统是一个专用的计算机系统，嵌入到一套设备中，完成特定的功能。可以有也可以没有操作系统。&lt;/p&gt;
&lt;h2&gt;2. 可用性、可靠性、安全性、保险性&lt;/h2&gt;
&lt;h3&gt;可用性Availability&lt;/h3&gt;
&lt;p&gt;系统在某个时间点是可运行的，并能够提供所期望服务的概率。&lt;/p&gt;
&lt;h3&gt;可靠性Reliability&lt;/h3&gt;
&lt;p&gt;系统在给定的时间内，给定的环境下，为给定目的而执行的系统操作保持无失效的概率。&lt;/p&gt;
&lt;h3&gt;安全性Security&lt;/h3&gt;
&lt;p&gt;系统保护自身不被外界故意或无意攻击的能力。&lt;/p&gt;
&lt;h3&gt;保险性Safety&lt;/h3&gt;
&lt;p&gt;系统运行期间不对人身或周边环境带来伤害的能力 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">WangXinyu</dc:creator><pubDate>Fri, 06 Nov 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:wang-xinyu.github.io,2015-11-06:/concepts-for-es.html</guid><category>ES</category></item></channel></rss>